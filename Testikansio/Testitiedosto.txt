using System.Collections;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    // Movement parameters
    [Header("Movement")]
    public float moveSpeed = 10f;
    public float sprintMultiplier = 1.5f;
    public float crouchMultiplier = 0.5f;
    public float groundDrag = 6f;
    public float airMultiplier = 0.4f;

    // Jumping parameters
    [Header("Jumping")]
    public float jumpForce = 8f;
    public float doubleJumpForce = 8f;
    public float jumpCooldown = 0.25f;
    bool readyToJump;
    bool doubleJumped;

    // Look settings
    [Header("Look Settings")]
    public float sensitivity = 2f;
    public float yMinLimit = -80f;
    public float yMaxLimit = 80f;

    // Ground check parameters
    [Header("Ground Check")]
    public LayerMask whatIsGround;
    public float groundCheckDistance = 0.2f;
    bool grounded;

    // Crouch parameters
    [Header("Crouch")]
    public float crouchHeight = 0.5f;
    bool isCrouching;

    // Wall jump parameters
    [Header("Wall Jump")]
    public float wallJumpForce = 8f;
    public float wallJumpCooldown = 0.5f;
    bool readyToWallJump;

    // Dash parameters
    [Header("Dash")]
    public float dashDistance = 5f;
    public float dashCooldown = 2f;
    bool readyToDash;

    // Input values
    Vector2 currentInput;
    Vector3 moveDirection;

    // Components
    Rigidbody rb;
    Transform playerCamera;

    private void Start()
    {
        // Initialize components
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true;
        readyToJump = true;
        readyToWallJump = true;
        readyToDash = true;

        playerCamera = Camera.main.transform;
    }

    private void Update()
    {
        // Handle player input
        MyInput();

        // Control camera rotation
        Look();

        // Control movement speed
        SpeedControl();

        // Handle crouching
        HandleCrouch();

        // Handle wall jumping
        HandleWallJump();

        // Handle dashing
        HandleDash();
    }

    private void FixedUpdate()
    {
        // Check if the player is grounded
        GroundCheck();

        // Move the player
        MovePlayer();
    }

    private void MyInput()
    {
        // Get input values
        horizontalInput = Input.GetAxis("Horizontal");
        verticalInput = Input.GetAxis("Vertical");
        currentInput = new Vector2(horizontalInput, verticalInput);

        // Sprinting
        if (Input.GetKey(KeyCode.LeftShift))
        {
            moveSpeed *= sprintMultiplier;
        }

        // Crouching
        if (Input.GetKeyDown(KeyCode.LeftControl))
        {
            ToggleCrouch();
        }

        // Jumping
        if (Input.GetButtonDown("Jump"))
        {
            if (grounded)
            {
                Jump();
            }
            else if (!doubleJumped && readyToJump)
            {
                DoubleJump();
            }
        }

        // Wall Jumping
        if (Input.GetButtonDown("Jump") && !grounded && readyToWallJump)
        {
            WallJump();
        }

        // Dash
        if (Input.GetKeyDown(KeyCode.LeftShift) && readyToDash)
        {
            Dash();
        }
    }

    private void GroundCheck()
    {
        // Check if the player is grounded using raycasting
        RaycastHit hit;
        grounded = Physics.Raycast(transform.position, Vector3.down, out hit, groundCheckDistance, whatIsGround);

        // Adjust player position to avoid being stuck on slopes
        if (grounded)
        {
            rb.MovePosition(hit.point + Vector3.up * playerHeight * 0.5f);
            doubleJumped = false;
        }
    }

    private void MovePlayer()
    {
        // Calculate movement direction based on camera orientation
        moveDirection = playerCamera.forward * currentInput.y + playerCamera.right * currentInput.x;
        moveDirection.y = 0f;
        moveDirection.Normalize();

        // On ground
        if (grounded)
        {
            // Apply force for movement
            rb.drag = groundDrag;
            rb.AddForce(moveDirection * moveSpeed, ForceMode.Acceleration);
        }
        // In air
        else
        {
            // Remove drag in air
            rb.drag = 0f;
            // Apply force for aerial movement
            rb.AddForce(moveDirection * moveSpeed * airMultiplier, ForceMode.Acceleration);
        }
    }

    private void SpeedControl()
    {
        // Limit player velocity
        float flatVel = Mathf.Sqrt(rb.velocity.x * rb.velocity.x + rb.velocity.z * rb.velocity.z);
        if (flatVel > moveSpeed)
        {
            float fallOff = flatVel - moveSpeed;
            Vector3 normalizedVelocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z).normalized;
            Vector3 vel = new Vector3(rb.velocity.x - normalizedVelocity.x * fallOff, 0f, rb.velocity.z - normalizedVelocity.z * fallOff);
            rb.velocity = new Vector3(vel.x, rb.velocity.y, vel.z);
        }
    }

    private void Look()
    {
        // Handle player camera rotation based on mouse input
        mouseX += Input.GetAxis("Mouse X") * sensitivity;
        mouseY -= Input.GetAxis("Mouse Y") * sensitivity;
        mouseY = Mathf.Clamp(mouseY, yMinLimit, yMaxLimit);

        playerCamera.localRotation = Quaternion.Euler(mouseY, 0f, 0f);
        transform.rotation = Quaternion.Euler(0f, mouseX, 0f);
    }

    private void Jump()
    {
        // Perform a standard jump
        rb.velocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z);
        rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
        readyToJump = false;
        Invoke(nameof(ResetJump), jumpCooldown);
    }

    private void DoubleJump()
    {
        // Perform a double jump
        rb.velocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z);
        rb.AddForce(Vector3.up * doubleJumpForce, ForceMode.Impulse);
        doubleJumped = true;
        readyToJump = false;
        Invoke(nameof(ResetJump), jumpCooldown);
    }

    private void ResetJump()
    {
        // Reset jump status
        readyToJump = true;
    }

    private void HandleCrouch()
    {
        // Toggle crouching
        if (Input.GetKeyDown(KeyCode.LeftControl))
        {
            ToggleCrouch();
        }
    }

    private void ToggleCrouch()
    {
        // Toggle crouch state and adjust camera position
        isCrouching = !isCrouching;

        if (isCrouching)
        {
            playerCamera.localPosition = new Vector3(0f, crouchHeight, 0f);
        }
        else
        {
            playerCamera.localPosition = new Vector3(0f, 0f, 0f);
        }
    }

    private void HandleWallJump()
    {
        // Reset wall jump status when grounded
        if (grounded)
        {
            readyToWallJump = true;
        }
    }

    private void WallJump()
    {
        // Perform a wall jump
        readyToWallJump = false;
        Vector3 wallJumpDirection = playerCamera.forward * currentInput.y + playerCamera.right * currentInput.x;
        rb.velocity = Vector3.zero;
        rb.AddForce(wallJumpDirection * wallJumpForce, ForceMode.Impulse);
        Invoke(nameof(ResetWallJump), wallJumpCooldown);
    }

    private void ResetWallJump()
    {
        // Reset wall jump status
        readyToWallJump = true;
    }

    private void HandleDash()
    {
        // Reset dash status when grounded
        if (grounded)
        {
            readyToDash = true;
        }
    }

    private void Dash()
    {
        // Perform a dash
        readyToDash = false;
        Vector3 dashDirection = playerCamera.forward * currentInput.y + playerCamera.right * currentInput.x;
        rb.velocity = Vector3.zero;
        rb.AddForce(dashDirection.normalized * dashDistance, ForceMode.Impulse);
        Invoke(nameof(ResetDash), dashCooldown);
    }

    private void ResetDash()
    {
        // Reset dash status
        readyToDash = true;
    }
}
